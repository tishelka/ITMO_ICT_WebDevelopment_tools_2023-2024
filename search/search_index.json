{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431. 1 \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u0425\u0430\u043a\u0430\u0442\u043e\u043d - \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b, \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u044b \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0435\u0448\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0438\u043c\u044f, \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0442. \u0434.). \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432. \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c. \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 (\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u0438\u0437\u0430\u0439\u043d, \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 \u0438 \u0442. \u0434.). \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447: \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438. \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0431\u043e\u0442: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b main.py from fastapi import FastAPI import uvicorn from database import init_db from routers.task_router import router as tasks_router from routers.participant_router import router as participant_router from routers.submission_router import router as submission_router from routers.team_member_router import router as team_member_router from routers.team_router import router as team_router from routers.auth_router import router as auth_router app = FastAPI() app.include_router(auth_router, prefix=\"/auth\") app.include_router(participant_router, prefix=\"/participants\") app.include_router(team_member_router, prefix=\"/team_members\") app.include_router(team_router, prefix=\"/teams\") app.include_router(tasks_router, prefix=\"/tasks\") app.include_router(submission_router, prefix=\"/submissions\") @app.on_event(\"startup\") def on_startup(): init_db() database.py from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session \u0420\u043e\u0443\u0442\u0435\u0440\u044b auth_router.py import datetime from fastapi import APIRouter, HTTPException, Depends, status, Security from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from schemas import Participant, ParticipantDefault, ParticipantDisplay, ChangePassword, Login from database import get_session from sqlmodel import select from passlib.context import CryptContext from jose import jwt import dotenv dotenv.load_dotenv() security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = 'top_secret' algorythm = 'HS256' router = APIRouter(tags=[\"Auth\"]) #\u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f def get_password_hash(password): return pwd_context.hash(password) @router.post('/registration', status_code=201) def register(user: ParticipantDefault, session=Depends(get_session)): users = session.exec(select(Participant)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = get_password_hash(user.password) user = Participant(username=user.username, password=hashed_pwd, email=user.email, contact_number=user.contact_number) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} def verify_password(pwd, hashed_pwd): return pwd_context.verify(pwd, hashed_pwd) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 def encode_token(user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, secret, algorithm=algorythm) @router.post('/login') def login(user: Login, session=Depends(get_session)): user_found = session.exec(select(Participant).where(Participant.username == user.username)).first() if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = encode_token(user_found.username) return {'token': token} # \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 def decode_token(token): try: payload = jwt.decode(token, secret, algorithms=[algorythm]) return payload['sub'] except Exception: raise HTTPException(status_code=401, detail='Token error') def get_current_user(auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(Participant).where(Participant.username == username)).first() if user is None: raise credentials_exception return user @router.get('/users/me') def user_me(user: Participant = Depends(get_current_user)) -> ParticipantDisplay: return user @router.patch(\"/users/me/reset-password\") def user_pwd(user_pwd: ChangePassword, session=Depends(get_session), current=Depends(get_current_user)): found_user = session.get(Participant, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(user_pwd.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(user_pwd.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"} participant_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Participant, ParticipantDefault, ParticipantDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Participant\"]) @router.post(\"/participant-create\", status_code=status.HTTP_201_CREATED) def participant_create(participant: ParticipantDefault, session=Depends(get_session)) -> Participant: participant = Participant.model_validate(participant) session.add(participant) session.commit() session.refresh(participant) return participant @router.get(\"/list-participants\", status_code=status.HTTP_200_OK) def participants_list(session=Depends(get_session)) -> list[Participant]: return session.query(Participant).all() @router.get(\"/participant/{participant_id}\", status_code=status.HTTP_200_OK, response_model=ParticipantDisplay) def participant_get(participant_id: int, session=Depends(get_session)): obj = session.get(Participant, participant_id) if obj is None: raise HTTPException(status_code=404, detail=\"participant not found\") return obj @router.patch(\"/participant/update/{participant_id}\", status_code=status.HTTP_202_ACCEPTED) def participant_update(participant_id: int, participant: ParticipantDefault, session=Depends(get_session)) \\ -> Participant: db_participant = session.get(Participant, participant_id) if not db_participant: raise HTTPException(status_code=404, detail=\"participant not found\") participant_data = participant.model_dump(exclude_unset=True) for key, value in participant_data.items(): setattr(db_participant, key, value) session.add(db_participant) session.commit() session.refresh(db_participant) return db_participant @router.delete(\"/participant/delete/{participant_id}\", status_code=status.HTTP_204_NO_CONTENT) def participant_delete(participant_id: int, session=Depends(get_session)): participant = session.get(Participant, participant_id) if not participant: raise HTTPException(status_code=404, detail=\"participant not found\") session.delete(participant) session.commit() return {\"ok\": True} submission_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Submission, SubmissionDefault from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Submissions\"]) @router.post(\"/submission-create\", status_code=status.HTTP_201_CREATED) def submission_create(submission: SubmissionDefault, session=Depends(get_session)) -> Submission: submission = Submission.model_validate(submission) session.add(submission) session.commit() session.refresh(submission) return submission @router.get(\"/list-submissions\", status_code=status.HTTP_200_OK) def submissions_list(session=Depends(get_session)) -> list[Submission]: return session.query(Submission).all() @router.get(\"/submission/{submission_id}\", status_code=status.HTTP_200_OK) def submission_get(submission_id: int, session=Depends(get_session)) -> Submission: obj = session.get(Submission, submission_id) if obj is None: raise HTTPException(status_code=404, detail=\"submission not found\") return obj @router.patch(\"/submission/update/{submission_id}\", status_code=status.HTTP_202_ACCEPTED) def submission_update(submission_id: int, submission: SubmissionDefault, session=Depends(get_session)) \\ -> Submission: db_submission = session.get(Submission, submission_id) if not db_submission: raise HTTPException(status_code=404, detail=\"submission not found\") submission_data = submission.model_dump(exclude_unset=True) for key, value in submission_data.items(): setattr(db_submission, key, value) session.add(db_submission) session.commit() session.refresh(db_submission) return db_submission @router.delete(\"/submission/delete/{submission_id}\", status_code=status.HTTP_204_NO_CONTENT) def submission_delete(submission_id: int, session=Depends(get_session)): submission = session.get(Submission, submission_id) if not submission: raise HTTPException(status_code=404, detail=\"submission not found\") session.delete(submission) session.commit() return {\"ok\": True} task_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Task, TaskDefault, TaskDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Task\"]) @router.post(\"/task-create\", status_code=status.HTTP_201_CREATED) def task_create(task: TaskDefault, session=Depends(get_session)) -> Task: task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return task @router.get(\"/list-tasks\", status_code=status.HTTP_200_OK) def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @router.get(\"/task/{task_id}\", status_code=status.HTTP_200_OK, response_model=TaskDisplay) def task_get(task_id: int, session=Depends(get_session)) -> Task: obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @router.patch(\"/task/update/{task_id}\", status_code=status.HTTP_202_ACCEPTED) def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) \\ -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @router.delete(\"/task/delete/{task_id}\", status_code=status.HTTP_204_NO_CONTENT) def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} taem_member_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import TeamMemberDefault, TeamMember from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Team member\"]) @router.post(\"/team_member-create\", status_code=status.HTTP_201_CREATED) def team_member_create(team_member: TeamMemberDefault, session=Depends(get_session)) -> TeamMember: team_member = TeamMember.model_validate(team_member) session.add(team_member) session.commit() session.refresh(team_member) return team_member @router.get(\"/list-team_members\", status_code=status.HTTP_200_OK) def team_members_list(session=Depends(get_session)) -> list[TeamMember]: return session.query(TeamMember).all() @router.get(\"/team_member/{team_member_id}\", status_code=status.HTTP_200_OK) def team_member_get(team_member_id: int, session=Depends(get_session)) -> TeamMember: obj = session.get(TeamMember, team_member_id) if obj is None: raise HTTPException(status_code=404, detail=\"team_member not found\") return obj @router.patch(\"/team_member/update/{team_member_id}\", status_code=status.HTTP_202_ACCEPTED) def team_member_update(team_member_id: int, team_member: TeamMemberDefault, session=Depends(get_session)) \\ -> TeamMember: db_team_member = session.get(TeamMember, team_member_id) if not db_team_member: raise HTTPException(status_code=404, detail=\"team_member not found\") team_member_data = team_member.model_dump(exclude_unset=True) for key, value in team_member_data.items(): setattr(db_team_member, key, value) session.add(db_team_member) session.commit() session.refresh(db_team_member) return db_team_member @router.delete(\"/team_member/delete/{team_member_id}\", status_code=status.HTTP_204_NO_CONTENT) def team_member_delete(team_member_id: int, session=Depends(get_session)): team_member = session.get(TeamMember, team_member_id) if not team_member: raise HTTPException(status_code=404, detail=\"team_member not found\") session.delete(team_member) session.commit() return {\"ok\": True} team_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Team, TeamDefault, TeamDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Team\"]) @router.post(\"/team-create\", status_code=status.HTTP_201_CREATED) def team_create(team: TeamDefault, session=Depends(get_session)) -> Team: team = Team.model_validate(team) session.add(team) session.commit() session.refresh(team) return team @router.get(\"/list-teams\", status_code=status.HTTP_200_OK) def teams_list(session=Depends(get_session)) -> list[Team]: return session.query(Team).all() @router.get(\"/team/{team_id}\", status_code=status.HTTP_200_OK, response_model=TeamDisplay) def team_get(team_id: int, session=Depends(get_session)) -> Team: obj = session.get(Team, team_id) if obj is None: raise HTTPException(status_code=404, detail=\"team not found\") return obj @router.patch(\"/team/update/{team_id}\", status_code=status.HTTP_202_ACCEPTED) def team_update(team_id: int, team: TeamDefault, session=Depends(get_session)) \\ -> Team: db_team = session.get(Team, team_id) if not db_team: raise HTTPException(status_code=404, detail=\"team not found\") team_data = team.model_dump(exclude_unset=True) for key, value in team_data.items(): setattr(db_team, key, value) session.add(db_team) session.commit() session.refresh(db_team) return db_team @router.delete(\"/team/delete/{team_id}\", status_code=status.HTTP_204_NO_CONTENT) def team_delete(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"team not found\") session.delete(team) session.commit() return {\"ok\": True} \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431. 1"},{"location":"#1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u0425\u0430\u043a\u0430\u0442\u043e\u043d - \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b, \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u044b \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0435\u0448\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0438\u043c\u044f, \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0442. \u0434.). \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432. \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c. \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 (\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u0438\u0437\u0430\u0439\u043d, \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 \u0438 \u0442. \u0434.). \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447: \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438. \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0431\u043e\u0442: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431. 1"},{"location":"#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#mainpy","text":"from fastapi import FastAPI import uvicorn from database import init_db from routers.task_router import router as tasks_router from routers.participant_router import router as participant_router from routers.submission_router import router as submission_router from routers.team_member_router import router as team_member_router from routers.team_router import router as team_router from routers.auth_router import router as auth_router app = FastAPI() app.include_router(auth_router, prefix=\"/auth\") app.include_router(participant_router, prefix=\"/participants\") app.include_router(team_member_router, prefix=\"/team_members\") app.include_router(team_router, prefix=\"/teams\") app.include_router(tasks_router, prefix=\"/tasks\") app.include_router(submission_router, prefix=\"/submissions\") @app.on_event(\"startup\") def on_startup(): init_db()","title":"main.py"},{"location":"#databasepy","text":"from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"database.py"},{"location":"#_2","text":"","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"#auth_routerpy","text":"import datetime from fastapi import APIRouter, HTTPException, Depends, status, Security from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from schemas import Participant, ParticipantDefault, ParticipantDisplay, ChangePassword, Login from database import get_session from sqlmodel import select from passlib.context import CryptContext from jose import jwt import dotenv dotenv.load_dotenv() security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = 'top_secret' algorythm = 'HS256' router = APIRouter(tags=[\"Auth\"]) #\u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f def get_password_hash(password): return pwd_context.hash(password) @router.post('/registration', status_code=201) def register(user: ParticipantDefault, session=Depends(get_session)): users = session.exec(select(Participant)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = get_password_hash(user.password) user = Participant(username=user.username, password=hashed_pwd, email=user.email, contact_number=user.contact_number) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} def verify_password(pwd, hashed_pwd): return pwd_context.verify(pwd, hashed_pwd) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 def encode_token(user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, secret, algorithm=algorythm) @router.post('/login') def login(user: Login, session=Depends(get_session)): user_found = session.exec(select(Participant).where(Participant.username == user.username)).first() if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = encode_token(user_found.username) return {'token': token} # \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 def decode_token(token): try: payload = jwt.decode(token, secret, algorithms=[algorythm]) return payload['sub'] except Exception: raise HTTPException(status_code=401, detail='Token error') def get_current_user(auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(Participant).where(Participant.username == username)).first() if user is None: raise credentials_exception return user @router.get('/users/me') def user_me(user: Participant = Depends(get_current_user)) -> ParticipantDisplay: return user @router.patch(\"/users/me/reset-password\") def user_pwd(user_pwd: ChangePassword, session=Depends(get_session), current=Depends(get_current_user)): found_user = session.get(Participant, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(user_pwd.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(user_pwd.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"}","title":"auth_router.py"},{"location":"#participant_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Participant, ParticipantDefault, ParticipantDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Participant\"]) @router.post(\"/participant-create\", status_code=status.HTTP_201_CREATED) def participant_create(participant: ParticipantDefault, session=Depends(get_session)) -> Participant: participant = Participant.model_validate(participant) session.add(participant) session.commit() session.refresh(participant) return participant @router.get(\"/list-participants\", status_code=status.HTTP_200_OK) def participants_list(session=Depends(get_session)) -> list[Participant]: return session.query(Participant).all() @router.get(\"/participant/{participant_id}\", status_code=status.HTTP_200_OK, response_model=ParticipantDisplay) def participant_get(participant_id: int, session=Depends(get_session)): obj = session.get(Participant, participant_id) if obj is None: raise HTTPException(status_code=404, detail=\"participant not found\") return obj @router.patch(\"/participant/update/{participant_id}\", status_code=status.HTTP_202_ACCEPTED) def participant_update(participant_id: int, participant: ParticipantDefault, session=Depends(get_session)) \\ -> Participant: db_participant = session.get(Participant, participant_id) if not db_participant: raise HTTPException(status_code=404, detail=\"participant not found\") participant_data = participant.model_dump(exclude_unset=True) for key, value in participant_data.items(): setattr(db_participant, key, value) session.add(db_participant) session.commit() session.refresh(db_participant) return db_participant @router.delete(\"/participant/delete/{participant_id}\", status_code=status.HTTP_204_NO_CONTENT) def participant_delete(participant_id: int, session=Depends(get_session)): participant = session.get(Participant, participant_id) if not participant: raise HTTPException(status_code=404, detail=\"participant not found\") session.delete(participant) session.commit() return {\"ok\": True}","title":"participant_router.py"},{"location":"#submission_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Submission, SubmissionDefault from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Submissions\"]) @router.post(\"/submission-create\", status_code=status.HTTP_201_CREATED) def submission_create(submission: SubmissionDefault, session=Depends(get_session)) -> Submission: submission = Submission.model_validate(submission) session.add(submission) session.commit() session.refresh(submission) return submission @router.get(\"/list-submissions\", status_code=status.HTTP_200_OK) def submissions_list(session=Depends(get_session)) -> list[Submission]: return session.query(Submission).all() @router.get(\"/submission/{submission_id}\", status_code=status.HTTP_200_OK) def submission_get(submission_id: int, session=Depends(get_session)) -> Submission: obj = session.get(Submission, submission_id) if obj is None: raise HTTPException(status_code=404, detail=\"submission not found\") return obj @router.patch(\"/submission/update/{submission_id}\", status_code=status.HTTP_202_ACCEPTED) def submission_update(submission_id: int, submission: SubmissionDefault, session=Depends(get_session)) \\ -> Submission: db_submission = session.get(Submission, submission_id) if not db_submission: raise HTTPException(status_code=404, detail=\"submission not found\") submission_data = submission.model_dump(exclude_unset=True) for key, value in submission_data.items(): setattr(db_submission, key, value) session.add(db_submission) session.commit() session.refresh(db_submission) return db_submission @router.delete(\"/submission/delete/{submission_id}\", status_code=status.HTTP_204_NO_CONTENT) def submission_delete(submission_id: int, session=Depends(get_session)): submission = session.get(Submission, submission_id) if not submission: raise HTTPException(status_code=404, detail=\"submission not found\") session.delete(submission) session.commit() return {\"ok\": True}","title":"submission_router.py"},{"location":"#task_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Task, TaskDefault, TaskDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Task\"]) @router.post(\"/task-create\", status_code=status.HTTP_201_CREATED) def task_create(task: TaskDefault, session=Depends(get_session)) -> Task: task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return task @router.get(\"/list-tasks\", status_code=status.HTTP_200_OK) def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @router.get(\"/task/{task_id}\", status_code=status.HTTP_200_OK, response_model=TaskDisplay) def task_get(task_id: int, session=Depends(get_session)) -> Task: obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @router.patch(\"/task/update/{task_id}\", status_code=status.HTTP_202_ACCEPTED) def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) \\ -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @router.delete(\"/task/delete/{task_id}\", status_code=status.HTTP_204_NO_CONTENT) def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True}","title":"task_router.py"},{"location":"#taem_member_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import TeamMemberDefault, TeamMember from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Team member\"]) @router.post(\"/team_member-create\", status_code=status.HTTP_201_CREATED) def team_member_create(team_member: TeamMemberDefault, session=Depends(get_session)) -> TeamMember: team_member = TeamMember.model_validate(team_member) session.add(team_member) session.commit() session.refresh(team_member) return team_member @router.get(\"/list-team_members\", status_code=status.HTTP_200_OK) def team_members_list(session=Depends(get_session)) -> list[TeamMember]: return session.query(TeamMember).all() @router.get(\"/team_member/{team_member_id}\", status_code=status.HTTP_200_OK) def team_member_get(team_member_id: int, session=Depends(get_session)) -> TeamMember: obj = session.get(TeamMember, team_member_id) if obj is None: raise HTTPException(status_code=404, detail=\"team_member not found\") return obj @router.patch(\"/team_member/update/{team_member_id}\", status_code=status.HTTP_202_ACCEPTED) def team_member_update(team_member_id: int, team_member: TeamMemberDefault, session=Depends(get_session)) \\ -> TeamMember: db_team_member = session.get(TeamMember, team_member_id) if not db_team_member: raise HTTPException(status_code=404, detail=\"team_member not found\") team_member_data = team_member.model_dump(exclude_unset=True) for key, value in team_member_data.items(): setattr(db_team_member, key, value) session.add(db_team_member) session.commit() session.refresh(db_team_member) return db_team_member @router.delete(\"/team_member/delete/{team_member_id}\", status_code=status.HTTP_204_NO_CONTENT) def team_member_delete(team_member_id: int, session=Depends(get_session)): team_member = session.get(TeamMember, team_member_id) if not team_member: raise HTTPException(status_code=404, detail=\"team_member not found\") session.delete(team_member) session.commit() return {\"ok\": True}","title":"taem_member_router.py"},{"location":"#team_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Team, TeamDefault, TeamDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Team\"]) @router.post(\"/team-create\", status_code=status.HTTP_201_CREATED) def team_create(team: TeamDefault, session=Depends(get_session)) -> Team: team = Team.model_validate(team) session.add(team) session.commit() session.refresh(team) return team @router.get(\"/list-teams\", status_code=status.HTTP_200_OK) def teams_list(session=Depends(get_session)) -> list[Team]: return session.query(Team).all() @router.get(\"/team/{team_id}\", status_code=status.HTTP_200_OK, response_model=TeamDisplay) def team_get(team_id: int, session=Depends(get_session)) -> Team: obj = session.get(Team, team_id) if obj is None: raise HTTPException(status_code=404, detail=\"team not found\") return obj @router.patch(\"/team/update/{team_id}\", status_code=status.HTTP_202_ACCEPTED) def team_update(team_id: int, team: TeamDefault, session=Depends(get_session)) \\ -> Team: db_team = session.get(Team, team_id) if not db_team: raise HTTPException(status_code=404, detail=\"team not found\") team_data = team.model_dump(exclude_unset=True) for key, value in team_data.items(): setattr(db_team, key, value) session.add(db_team) session.commit() session.refresh(db_team) return db_team @router.delete(\"/team/delete/{team_id}\", status_code=status.HTTP_204_NO_CONTENT) def team_delete(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"team not found\") session.delete(team) session.commit() return {\"ok\": True}","title":"team_router.py"},{"location":"#_3","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"%D0%9B%D0%A02/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431. 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b task_1_async.py import asyncio import time # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end async def calculate_partial_sum(start, end): return sum(range(start, end + 1)) # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b async def calculate_sum(): total_tasks = 5 # \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u0447 n = 1000000 # \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 step = n // total_tasks # \u0448\u0430\u0433 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 tasks = [] # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c for i in range(total_tasks): start = i * step + 1 # \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 end = (i + 1) * step if i != total_tasks - 1 else n # \u043a\u043e\u043d\u0435\u0446 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 tasks.append(asyncio.create_task(calculate_partial_sum(start, end))) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b results = await asyncio.gather(*tasks) total_sum = sum(results) # \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 return total_sum start_time = time.time() sum_result = asyncio.run(calculate_sum()) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() print(f\"sum: {sum_result}, time: {end_time - start_time} seconds\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043f\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c asyncio. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: * \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u044f \u043f\u043e\u0442\u043e\u043a \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f. * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 asyncio.create_task() \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447. * \u0421\u0431\u043e\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e asyncio.gather(). * \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. task_1_multiprocess.py import multiprocessing import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a def calculate_partial_sum(start, end, result, index): result[index] = sum(range(start, end + 1)) # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b def calculate_sum(): total_processes = 5 # \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 n = 1000000 # \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 process_list = [] manager = multiprocessing.Manager() result = manager.list([0] * total_processes) # \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c for i in range(total_processes): start = i * (n // total_processes) + 1 # \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 end = (i + 1) * (n // total_processes) if i != total_processes - 1 else n # \u043a\u043e\u043d\u0435\u0446 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 process = multiprocessing.Process(target=calculate_partial_sum, args=(start, end, result, i)) process_list.append(process) process.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 for process in process_list: process.join() total_sum = sum(result) # \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 return total_sum if __name__ == '__main__': start_time = time.time() sum_result = calculate_sum() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() print(f\"sum: {sum_result}, time: {end_time - start_time} seconds\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043f\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: * \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445, \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043d\u043e\u0433\u043e\u044f\u0434\u0435\u0440\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b. * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 multiprocessing.Process \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. * \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0446\u0438\u044f \u0438 \u0441\u0431\u043e\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 multiprocessing.Manager().list(). task_1_thread.py import threading import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a def calculate_partial_sum(start, end, result, index): result[index] = sum(range(start, end + 1)) # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b def calculate_sum(): total_threads = 5 # \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 n = 1000000 # \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 thread_list = [] result = [0] * total_threads # \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c for i in range(total_threads): start = i * (n // total_threads) + 1 # \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 end = (i + 1) * (n // total_threads) if i != total_threads - 1 else n # \u043a\u043e\u043d\u0435\u0446 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 thread = threading.Thread(target=calculate_partial_sum, args=(start, end, result, i)) thread_list.append(thread) thread.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 for thread in thread_list: thread.join() total_sum = sum(result) # \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 return total_sum start_time = time.time() sum_result = calculate_sum() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() print(f\"sum: {sum_result}, time: {end_time - start_time} seconds\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043f\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435, \u043d\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 threading.Thread \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0446\u0438\u044f \u0438 \u0441\u0431\u043e\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. task_2_async.py import os import aiohttp import asyncio import asyncpg from bs4 import BeautifulSoup import time from dotenv import load_dotenv load_dotenv() # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 async def parse_and_save(url): # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 async with aiohttp.ClientSession() as session: async with session.get(url) as response: html = await response.text() soup = BeautifulSoup(html, 'html.parser') title = soup.find('title').text # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0442\u0430\u0432\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 conn = await asyncpg.connect('postgresql://postgres:postgres@localhost:5432/web_data') try: await conn.execute( \"INSERT INTO site (url, title) VALUES ($1, $2)\", url, title ) finally: await conn.close() # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 async def main(urls): tasks = [] for url in urls: task = asyncio.create_task(parse_and_save(url)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": urls = [ 'https://career.habr.com/vacancies?s%5B%5D=2&s%5B%5D=3&s%5B%5D=82&s%5B%5D=4&s%5B%5D=5&s%5B%5D=72&s%5B%5D=1&s%5B%5D=75&s%5B%5D=6&s%5B%5D=77&s%5B%5D=7&s%5B%5D=83&s%5B%5D=84&s%5B%5D=8&s%5B%5D=85&s%5B%5D=73&s%5B%5D=9&s%5B%5D=86&s%5B%5D=106&type=all', 'https://career.habr.com/vacancies?s[]=2&s[]=3&s[]=82&s[]=4&s[]=5&s[]=72&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=84&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&s[]=106&sort=salary_desc&type=all', 'https://career.habr.com/vacancies?s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true', 'https://career.habr.com/vacancies?locations[]=c_699&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true' ] start_time = time.time() asyncio.run(main(urls)) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() execution_time = end_time - start_time print(f\"async: {execution_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0430\u0440\u0441\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c aiohttp \u0434\u043b\u044f HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 asyncpg \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 asyncio.create_task() \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. task_2_multiprocess.py import os from multiprocessing import Pool import requests from bs4 import BeautifulSoup import psycopg2 import time from data import insert_data from dotenv import load_dotenv load_dotenv() # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.find('title').text insert_data(url, title) # \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0411\u0414 # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 def main(urls): num_process = len(urls) if len(urls) < 4 else 4 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) # \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c if __name__ == \"__main__\": urls = [ 'https://career.habr.com/vacancies?s%5B%5D=2&s%5B%5D=3&s%5B%5D=82&s%5B%5D=4&s%5B%5D=5&s%5B%5D=72&s%5B%5D=1&s%5B%5D=75&s%5B%5D=6&s%5B%5D=77&s%5B%5D=7&s%5B%5D=83&s%5B%5D=84&s%5B%5D=8&s%5B%5D=85&s%5B%5D=73&s%5B%5D=9&s%5B%5D=86&s%5B%5D=106&type=all', 'https://career.habr.com/vacancies?s[]=2&s[]=3&s[]=82&s[]=4&s[]=5&s[]=72&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=84&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&s[]=106&sort=salary_desc&type=all', 'https://career.habr.com/vacancies?s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true', 'https://career.habr.com/vacancies?locations[]=c_699&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true' ] start_time = time.time() main(urls) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() execution_time = end_time - start_time print(f\"Multiprocess: {execution_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0430\u0440\u0441\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing.Pool \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 requests \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. task_2_thread.py import os from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time from data import insert_data from dotenv import load_dotenv load_dotenv() # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.find('title').text insert_data(url, title) # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 for thread in threads: thread.join() if __name__ == \"__main__\": urls = [ 'https://career.habr.com/vacancies?s%5B%5D=2&s%5B%5D=3&s%5B%5D=82&s%5B%5D=4&s%5B%5D=5&s%5B%5D=72&s%5B%5D=1&s%5B%5D=75&s%5B%5D=6&s%5B%5D=77&s%5B%5D=7&s%5B%5D=83&s%5B%5D=84&s%5B%5D=8&s%5B%5D=85&s%5B%5D=73&s%5B%5D=9&s%5B%5D=86&s%5B%5D=106&type=all', 'https://career.habr.com/vacancies?s[]=2&s[]=3&s[]=82&s[]=4&s[]=5&s[]=72&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=84&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&s[]=106&sort=salary_desc&type=all', 'https://career.habr.com/vacancies?s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true', 'https://career.habr.com/vacancies?locations[]=c_699&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true' ] start_time = time.time() main(urls) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() execution_time = end_time - start_time print(f\"Tread: {execution_time}\") \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0430\u0440\u0441\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading.Thread \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 requests \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0412\u044b\u0432\u043e\u0434\u044b \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c (0.021 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043d\u0435 \u0437\u0430\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0412\u044b\u0432\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0447\u0430\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c (0.237 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f\u0434\u0435\u0440 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0412\u044b\u0432\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445 \u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438. \u041e\u0434\u043d\u0430\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043e\u043d\u0430 \u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430 \u0438\u0437-\u0437\u0430 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041f\u043e\u0442\u043e\u043a\u0438 (0.020 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041f\u043e\u0442\u043e\u043a\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u0412\u044b\u0432\u043e\u0434: \u041f\u043e\u0442\u043e\u043a\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c (1.599 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u043e, \u043d\u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0412\u044b\u0432\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0438\u0437-\u0437\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c (1.706 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0432\u0441\u0435\u0445. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0412\u044b\u0432\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437-\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432. Threading (0.891 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041f\u043e\u0442\u043e\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u0412\u044b\u0432\u043e\u0434: \u041f\u043e\u0442\u043e\u043a\u0438 - \u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431. 2"},{"location":"%D0%9B%D0%A02/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431. 2"},{"location":"%D0%9B%D0%A02/#1-threading-multiprocessing-async-python","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"%D0%9B%D0%A02/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"%D0%9B%D0%A02/#task_1_asyncpy","text":"import asyncio import time # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end async def calculate_partial_sum(start, end): return sum(range(start, end + 1)) # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b async def calculate_sum(): total_tasks = 5 # \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u0447 n = 1000000 # \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 step = n // total_tasks # \u0448\u0430\u0433 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 tasks = [] # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c for i in range(total_tasks): start = i * step + 1 # \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 end = (i + 1) * step if i != total_tasks - 1 else n # \u043a\u043e\u043d\u0435\u0446 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 tasks.append(asyncio.create_task(calculate_partial_sum(start, end))) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b results = await asyncio.gather(*tasks) total_sum = sum(results) # \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 return total_sum start_time = time.time() sum_result = asyncio.run(calculate_sum()) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() print(f\"sum: {sum_result}, time: {end_time - start_time} seconds\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task_1_async.py"},{"location":"%D0%9B%D0%A02/#_2","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043f\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c asyncio. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: * \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u044f \u043f\u043e\u0442\u043e\u043a \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f. * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 asyncio.create_task() \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447. * \u0421\u0431\u043e\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e asyncio.gather(). * \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"%D0%9B%D0%A02/#task_1_multiprocesspy","text":"import multiprocessing import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a def calculate_partial_sum(start, end, result, index): result[index] = sum(range(start, end + 1)) # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b def calculate_sum(): total_processes = 5 # \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 n = 1000000 # \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 process_list = [] manager = multiprocessing.Manager() result = manager.list([0] * total_processes) # \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c for i in range(total_processes): start = i * (n // total_processes) + 1 # \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 end = (i + 1) * (n // total_processes) if i != total_processes - 1 else n # \u043a\u043e\u043d\u0435\u0446 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 process = multiprocessing.Process(target=calculate_partial_sum, args=(start, end, result, i)) process_list.append(process) process.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 for process in process_list: process.join() total_sum = sum(result) # \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 return total_sum if __name__ == '__main__': start_time = time.time() sum_result = calculate_sum() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() print(f\"sum: {sum_result}, time: {end_time - start_time} seconds\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task_1_multiprocess.py"},{"location":"%D0%9B%D0%A02/#_3","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043f\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: * \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445, \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043d\u043e\u0433\u043e\u044f\u0434\u0435\u0440\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b. * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 multiprocessing.Process \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. * \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0446\u0438\u044f \u0438 \u0441\u0431\u043e\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 multiprocessing.Manager().list().","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"%D0%9B%D0%A02/#task_1_threadpy","text":"import threading import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a def calculate_partial_sum(start, end, result, index): result[index] = sum(range(start, end + 1)) # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b def calculate_sum(): total_threads = 5 # \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 n = 1000000 # \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 thread_list = [] result = [0] * total_threads # \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c for i in range(total_threads): start = i * (n // total_threads) + 1 # \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 end = (i + 1) * (n // total_threads) if i != total_threads - 1 else n # \u043a\u043e\u043d\u0435\u0446 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 thread = threading.Thread(target=calculate_partial_sum, args=(start, end, result, i)) thread_list.append(thread) thread.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 for thread in thread_list: thread.join() total_sum = sum(result) # \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 return total_sum start_time = time.time() sum_result = calculate_sum() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() print(f\"sum: {sum_result}, time: {end_time - start_time} seconds\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task_1_thread.py"},{"location":"%D0%9B%D0%A02/#_4","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043f\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435, \u043d\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 threading.Thread \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0446\u0438\u044f \u0438 \u0441\u0431\u043e\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"%D0%9B%D0%A02/#2-","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"%D0%9B%D0%A02/#task_2_asyncpy","text":"import os import aiohttp import asyncio import asyncpg from bs4 import BeautifulSoup import time from dotenv import load_dotenv load_dotenv() # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 async def parse_and_save(url): # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 async with aiohttp.ClientSession() as session: async with session.get(url) as response: html = await response.text() soup = BeautifulSoup(html, 'html.parser') title = soup.find('title').text # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0442\u0430\u0432\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 conn = await asyncpg.connect('postgresql://postgres:postgres@localhost:5432/web_data') try: await conn.execute( \"INSERT INTO site (url, title) VALUES ($1, $2)\", url, title ) finally: await conn.close() # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 async def main(urls): tasks = [] for url in urls: task = asyncio.create_task(parse_and_save(url)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": urls = [ 'https://career.habr.com/vacancies?s%5B%5D=2&s%5B%5D=3&s%5B%5D=82&s%5B%5D=4&s%5B%5D=5&s%5B%5D=72&s%5B%5D=1&s%5B%5D=75&s%5B%5D=6&s%5B%5D=77&s%5B%5D=7&s%5B%5D=83&s%5B%5D=84&s%5B%5D=8&s%5B%5D=85&s%5B%5D=73&s%5B%5D=9&s%5B%5D=86&s%5B%5D=106&type=all', 'https://career.habr.com/vacancies?s[]=2&s[]=3&s[]=82&s[]=4&s[]=5&s[]=72&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=84&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&s[]=106&sort=salary_desc&type=all', 'https://career.habr.com/vacancies?s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true', 'https://career.habr.com/vacancies?locations[]=c_699&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true' ] start_time = time.time() asyncio.run(main(urls)) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() execution_time = end_time - start_time print(f\"async: {execution_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task_2_async.py"},{"location":"%D0%9B%D0%A02/#_5","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0430\u0440\u0441\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c aiohttp \u0434\u043b\u044f HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 asyncpg \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 asyncio.create_task() \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"%D0%9B%D0%A02/#task_2_multiprocesspy","text":"import os from multiprocessing import Pool import requests from bs4 import BeautifulSoup import psycopg2 import time from data import insert_data from dotenv import load_dotenv load_dotenv() # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.find('title').text insert_data(url, title) # \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0411\u0414 # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 def main(urls): num_process = len(urls) if len(urls) < 4 else 4 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) # \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c if __name__ == \"__main__\": urls = [ 'https://career.habr.com/vacancies?s%5B%5D=2&s%5B%5D=3&s%5B%5D=82&s%5B%5D=4&s%5B%5D=5&s%5B%5D=72&s%5B%5D=1&s%5B%5D=75&s%5B%5D=6&s%5B%5D=77&s%5B%5D=7&s%5B%5D=83&s%5B%5D=84&s%5B%5D=8&s%5B%5D=85&s%5B%5D=73&s%5B%5D=9&s%5B%5D=86&s%5B%5D=106&type=all', 'https://career.habr.com/vacancies?s[]=2&s[]=3&s[]=82&s[]=4&s[]=5&s[]=72&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=84&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&s[]=106&sort=salary_desc&type=all', 'https://career.habr.com/vacancies?s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true', 'https://career.habr.com/vacancies?locations[]=c_699&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true' ] start_time = time.time() main(urls) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() execution_time = end_time - start_time print(f\"Multiprocess: {execution_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task_2_multiprocess.py"},{"location":"%D0%9B%D0%A02/#_6","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0430\u0440\u0441\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing.Pool \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 requests \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"%D0%9B%D0%A02/#task_2_threadpy","text":"import os from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time from data import insert_data from dotenv import load_dotenv load_dotenv() # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.find('title').text insert_data(url, title) # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 for thread in threads: thread.join() if __name__ == \"__main__\": urls = [ 'https://career.habr.com/vacancies?s%5B%5D=2&s%5B%5D=3&s%5B%5D=82&s%5B%5D=4&s%5B%5D=5&s%5B%5D=72&s%5B%5D=1&s%5B%5D=75&s%5B%5D=6&s%5B%5D=77&s%5B%5D=7&s%5B%5D=83&s%5B%5D=84&s%5B%5D=8&s%5B%5D=85&s%5B%5D=73&s%5B%5D=9&s%5B%5D=86&s%5B%5D=106&type=all', 'https://career.habr.com/vacancies?s[]=2&s[]=3&s[]=82&s[]=4&s[]=5&s[]=72&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=84&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&s[]=106&sort=salary_desc&type=all', 'https://career.habr.com/vacancies?s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true', 'https://career.habr.com/vacancies?locations[]=c_699&s[]=1&s[]=75&s[]=6&s[]=77&s[]=7&s[]=83&s[]=8&s[]=85&s[]=73&s[]=9&s[]=86&sort=date&type=all&with_salary=true' ] start_time = time.time() main(urls) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e end_time = time.time() execution_time = end_time - start_time print(f\"Tread: {execution_time}\")","title":"task_2_thread.py"},{"location":"%D0%9B%D0%A02/#_7","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0430\u0440\u0441\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading.Thread \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 requests \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"%D0%9B%D0%A02/#_8","text":"","title":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"%D0%9B%D0%A02/#_9","text":"","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"%D0%9B%D0%A02/#1","text":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c (0.021 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043d\u0435 \u0437\u0430\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0412\u044b\u0432\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0447\u0430\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c (0.237 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f\u0434\u0435\u0440 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0412\u044b\u0432\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445 \u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438. \u041e\u0434\u043d\u0430\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043e\u043d\u0430 \u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430 \u0438\u0437-\u0437\u0430 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041f\u043e\u0442\u043e\u043a\u0438 (0.020 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041f\u043e\u0442\u043e\u043a\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u0412\u044b\u0432\u043e\u0434: \u041f\u043e\u0442\u043e\u043a\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"%D0%9B%D0%A02/#2_1","text":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c (1.599 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u043e, \u043d\u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0412\u044b\u0432\u043e\u0434: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0438\u0437-\u0437\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c (1.706 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0432\u0441\u0435\u0445. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0412\u044b\u0432\u043e\u0434: \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0438\u0437-\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432. Threading (0.891 \u0441\u0435\u043a): \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u041f\u043e\u0442\u043e\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u0412\u044b\u0432\u043e\u0434: \u041f\u043e\u0442\u043e\u043a\u0438 - \u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/","text":"\u041e\u0442\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041e\u0442\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041b\u04201 3Sum Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: nums.sort() result = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result Add Two Numbers You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total_sum = val1 + val2 + carry carry = total_sum // 10 new_digit = total_sum % 10 current.next = ListNode(new_digit) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next Binary Tree Inorder Traversal Given the root of a binary tree, return the inorder traversal of its nodes' values. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right from typing import Optional, List class Solution: def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]: result = [] self._inorder_helper(root, result) return result def _inorder_helper(self, node: Optional[TreeNode], result: List[int]): if node: self._inorder_helper(node.left, result) result.append(node.val) self._inorder_helper(node.right, result) Binary Tree Zigzag Level Order Traversal Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between). \u0420\u0435\u0448\u0435\u043d\u0438\u0435 # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right from typing import Optional, List from collections import deque class Solution: def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] results = [] queue = deque([root]) left_to_right = True while queue: level_size = len(queue) level = deque() for _ in range(level_size): node = queue.popleft() if left_to_right: level.append(node.val) else: level.appendleft(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) results.append(list(level)) left_to_right = not left_to_right return results \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","title":"\u041e\u0442\u0440\u0430\u0431\u043e\u0442\u043a\u0430"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#_1","text":"","title":"\u041e\u0442\u0440\u0430\u0431\u043e\u0442\u043a\u0430"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#1","text":"","title":"\u041e\u0442\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041b\u04201"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#3sum","text":"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.","title":"3Sum"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#_2","text":"class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: nums.sort() result = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#add-two-numbers","text":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.","title":"Add Two Numbers"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#_3","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total_sum = val1 + val2 + carry carry = total_sum // 10 new_digit = total_sum % 10 current.next = ListNode(new_digit) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#binary-tree-inorder-traversal","text":"Given the root of a binary tree, return the inorder traversal of its nodes' values.","title":"Binary Tree Inorder Traversal"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#_4","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right from typing import Optional, List class Solution: def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]: result = [] self._inorder_helper(root, result) return result def _inorder_helper(self, node: Optional[TreeNode], result: List[int]): if node: self._inorder_helper(node.left, result) result.append(node.val) self._inorder_helper(node.right, result)","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#binary-tree-zigzag-level-order-traversal","text":"Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).","title":"Binary Tree Zigzag Level Order Traversal"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#_5","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right from typing import Optional, List from collections import deque class Solution: def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] results = [] queue = deque([root]) left_to_right = True while queue: level_size = len(queue) level = deque() for _ in range(level_size): node = queue.popleft() if left_to_right: level.append(node.val) else: level.appendleft(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) results.append(list(level)) left_to_right = not left_to_right return results","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"%D0%9B%D0%B8%D1%82%D0%BA%D0%BE%D0%B4/#_6","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"%D0%9F%D0%A01.1/","text":"\u041f\u0420 1.1 \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f main.py from fastapi import FastAPI from fastapi import FastAPI from db import project_db from typing import Optional, List from typing_extensions import TypedDict from models import * app = FastAPI() @app.get(\"/\") def hello(): return \"Hello, [username]!\" @app.get(\"/teams_list\") def teams_list(): return temp_bd @app.get(\"/team/{team_id}\") def teams_list(team_id: int): return [team for team in temp_bd if team.get(\"id\") == team_id] @app.post(\"/team\") def teams_list(team: dict): temp_bd.append(team) return {\"status\": 200, \"data\": team} @app.delete(\"/team/delete{team_id}\") def team_delete(team_id: int): for i, team in enumerate(temp_bd): if team.get(\"id\") == team_id: temp_bd.pop(i) break return {\"status\": 201, \"message\": \"deleted\"} @app.put(\"/team{team_id}\") def team_update(team_id: int, team: dict): for i, war in enumerate(temp_id): if war.get(\"id\") == team_id: temp_id[i] = team return temp_id db.py project_db = [ { 'id' : 1, 'name' : 'name 1', 'description' : 'description', 'participants' : [ { 'id': 1, 'username': 'name 1', 'email': 'main@ex.com', 'password': 'pass', 'contact_number': '1111111' } ], }, { 'id': 2, 'name': 'name 2', 'description': 'description 2', 'participants': [ { 'id' : 2, 'username' : 'name 2', 'email' : 'main@ex.com', 'password' : 'pass', 'contact_number' : '22222222' }, { 'id': 3, 'username': 'name 3', 'email': 'main@ex.com', 'password': 'pass', 'contact_number': '333333' } ], } ] schemas.py from enum import Enum from typing import Optional, List from pydantic import BaseModel class Participant(BaseModel): id: int username: str email: str password: str contact_number: str class Team(BaseModel): id: int name: str description: str participants: Optional[List[Participant]] = []","title":"\u041f\u0420 1.1"},{"location":"%D0%9F%D0%A01.1/#11","text":"","title":"\u041f\u0420 1.1"},{"location":"%D0%9F%D0%A01.1/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"%D0%9F%D0%A01.1/#mainpy","text":"from fastapi import FastAPI from fastapi import FastAPI from db import project_db from typing import Optional, List from typing_extensions import TypedDict from models import * app = FastAPI() @app.get(\"/\") def hello(): return \"Hello, [username]!\" @app.get(\"/teams_list\") def teams_list(): return temp_bd @app.get(\"/team/{team_id}\") def teams_list(team_id: int): return [team for team in temp_bd if team.get(\"id\") == team_id] @app.post(\"/team\") def teams_list(team: dict): temp_bd.append(team) return {\"status\": 200, \"data\": team} @app.delete(\"/team/delete{team_id}\") def team_delete(team_id: int): for i, team in enumerate(temp_bd): if team.get(\"id\") == team_id: temp_bd.pop(i) break return {\"status\": 201, \"message\": \"deleted\"} @app.put(\"/team{team_id}\") def team_update(team_id: int, team: dict): for i, war in enumerate(temp_id): if war.get(\"id\") == team_id: temp_id[i] = team return temp_id","title":"main.py"},{"location":"%D0%9F%D0%A01.1/#dbpy","text":"project_db = [ { 'id' : 1, 'name' : 'name 1', 'description' : 'description', 'participants' : [ { 'id': 1, 'username': 'name 1', 'email': 'main@ex.com', 'password': 'pass', 'contact_number': '1111111' } ], }, { 'id': 2, 'name': 'name 2', 'description': 'description 2', 'participants': [ { 'id' : 2, 'username' : 'name 2', 'email' : 'main@ex.com', 'password' : 'pass', 'contact_number' : '22222222' }, { 'id': 3, 'username': 'name 3', 'email': 'main@ex.com', 'password': 'pass', 'contact_number': '333333' } ], } ]","title":"db.py"},{"location":"%D0%9F%D0%A01.1/#schemaspy","text":"from enum import Enum from typing import Optional, List from pydantic import BaseModel class Participant(BaseModel): id: int username: str email: str password: str contact_number: str class Team(BaseModel): id: int name: str description: str participants: Optional[List[Participant]] = []","title":"schemas.py"},{"location":"%D0%9F%D0%A01.2/","text":"\u041f\u0420 1.2 \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f main.py from fastapi import FastAPI import uvicorn from database import init_db from routers.task_router import router as tasks_router from routers.participant_router import router as participant_router from routers.submission_router import router as submission_router from routers.team_member_router import router as team_member_router from routers.team_router import router as team_router app = FastAPI() app.include_router(participant_router, prefix=\"/participants\") app.include_router(team_member_router, prefix=\"/team_members\") app.include_router(team_router, prefix=\"/teams\") app.include_router(tasks_router, prefix=\"/tasks\") app.include_router(submission_router, prefix=\"/submissions\") @app.on_event(\"startup\") def on_startup(): init_db() database.py from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session schemas.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Urgency(Enum): emergency = 'emergency' urgently = 'urgently' no_hurry = 'no_hurry' one_day = 'one_day' class TeamMemberDefault(SQLModel): participant_id: Optional[int] = Field(default=None, foreign_key=\"participant.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") class TeamMember(TeamMemberDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[\"Participant\"] = Relationship(back_populates=\"teammembers\") teams: Optional[\"Team\"] = Relationship(back_populates=\"teammembers\") class SubmissionDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") work_link: str urgency: Urgency class Submission(SubmissionDefault, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[\"Task\"] = Relationship(back_populates=\"submissions\") teams: Optional[\"Team\"] = Relationship(back_populates=\"submissions\") class ParticipantDefault(SQLModel): username: str email: str password: str contact_number: str class Participant(ParticipantDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"participants\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"participants\") class TeamDefault(SQLModel): name: str description: str class Team(TeamDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[List[\"Participant\"]] = Relationship( back_populates=\"teams\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"teams\") tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"teams\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"teams\") class TaskDefault(SQLModel): title: str description: str requirements: str evaluation_criteria: str class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"tasks\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"tasks\") class ParticipantDisplay(ParticipantDefault): teams: Optional[List[\"Team\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None class TeamDisplay(TeamDefault): participants: Optional[List[\"Participant\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None tasks: Optional[List[\"Task\"]] = None submissions: Optional[List[\"Submission\"]] = None class TaskDisplay(TaskDefault): teams: Optional[List[\"Team\"]] = None submissions: Optional[List[\"Submission\"]] = None class Login(SQLModel): username: str password: str class ChangePassword(SQLModel): old_password: str new_password: str \u0420\u043e\u0443\u0442\u0435\u0440\u044b participant_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Participant, ParticipantDefault, ParticipantDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Participant\"]) @router.post(\"/participant-create\", status_code=status.HTTP_201_CREATED) def participant_create(participant: ParticipantDefault, session=Depends(get_session)) -> Participant: participant = Participant.model_validate(participant) session.add(participant) session.commit() session.refresh(participant) return participant @router.get(\"/list-participants\", status_code=status.HTTP_200_OK) def participants_list(session=Depends(get_session)) -> list[Participant]: return session.query(Participant).all() @router.get(\"/participant/{participant_id}\", status_code=status.HTTP_200_OK, response_model=ParticipantDisplay) def participant_get(participant_id: int, session=Depends(get_session)): obj = session.get(Participant, participant_id) if obj is None: raise HTTPException(status_code=404, detail=\"participant not found\") return obj @router.patch(\"/participant/update/{participant_id}\", status_code=status.HTTP_202_ACCEPTED) def participant_update(participant_id: int, participant: ParticipantDefault, session=Depends(get_session)) \\ -> Participant: db_participant = session.get(Participant, participant_id) if not db_participant: raise HTTPException(status_code=404, detail=\"participant not found\") participant_data = participant.model_dump(exclude_unset=True) for key, value in participant_data.items(): setattr(db_participant, key, value) session.add(db_participant) session.commit() session.refresh(db_participant) return db_participant @router.delete(\"/participant/delete/{participant_id}\", status_code=status.HTTP_204_NO_CONTENT) def participant_delete(participant_id: int, session=Depends(get_session)): participant = session.get(Participant, participant_id) if not participant: raise HTTPException(status_code=404, detail=\"participant not found\") session.delete(participant) session.commit() return {\"ok\": True} submission_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Submission, SubmissionDefault from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Submissions\"]) @router.post(\"/submission-create\", status_code=status.HTTP_201_CREATED) def submission_create(submission: SubmissionDefault, session=Depends(get_session)) -> Submission: submission = Submission.model_validate(submission) session.add(submission) session.commit() session.refresh(submission) return submission @router.get(\"/list-submissions\", status_code=status.HTTP_200_OK) def submissions_list(session=Depends(get_session)) -> list[Submission]: return session.query(Submission).all() @router.get(\"/submission/{submission_id}\", status_code=status.HTTP_200_OK) def submission_get(submission_id: int, session=Depends(get_session)) -> Submission: obj = session.get(Submission, submission_id) if obj is None: raise HTTPException(status_code=404, detail=\"submission not found\") return obj @router.patch(\"/submission/update/{submission_id}\", status_code=status.HTTP_202_ACCEPTED) def submission_update(submission_id: int, submission: SubmissionDefault, session=Depends(get_session)) \\ -> Submission: db_submission = session.get(Submission, submission_id) if not db_submission: raise HTTPException(status_code=404, detail=\"submission not found\") submission_data = submission.model_dump(exclude_unset=True) for key, value in submission_data.items(): setattr(db_submission, key, value) session.add(db_submission) session.commit() session.refresh(db_submission) return db_submission @router.delete(\"/submission/delete/{submission_id}\", status_code=status.HTTP_204_NO_CONTENT) def submission_delete(submission_id: int, session=Depends(get_session)): submission = session.get(Submission, submission_id) if not submission: raise HTTPException(status_code=404, detail=\"submission not found\") session.delete(submission) session.commit() return {\"ok\": True} task-router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Task, TaskDefault, TaskDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Task\"]) @router.post(\"/task-create\", status_code=status.HTTP_201_CREATED) def task_create(task: TaskDefault, session=Depends(get_session)) -> Task: task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return task @router.get(\"/list-tasks\", status_code=status.HTTP_200_OK) def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @router.get(\"/task/{task_id}\", status_code=status.HTTP_200_OK, response_model=TaskDisplay) def task_get(task_id: int, session=Depends(get_session)) -> Task: obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @router.patch(\"/task/update/{task_id}\", status_code=status.HTTP_202_ACCEPTED) def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) \\ -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @router.delete(\"/task/delete/{task_id}\", status_code=status.HTTP_204_NO_CONTENT) def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} team_member_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Task, TaskDefault, TaskDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Task\"]) @router.post(\"/task-create\", status_code=status.HTTP_201_CREATED) def task_create(task: TaskDefault, session=Depends(get_session)) -> Task: task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return task @router.get(\"/list-tasks\", status_code=status.HTTP_200_OK) def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @router.get(\"/task/{task_id}\", status_code=status.HTTP_200_OK, response_model=TaskDisplay) def task_get(task_id: int, session=Depends(get_session)) -> Task: obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @router.patch(\"/task/update/{task_id}\", status_code=status.HTTP_202_ACCEPTED) def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) \\ -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @router.delete(\"/task/delete/{task_id}\", status_code=status.HTTP_204_NO_CONTENT) def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} team_router.py from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Team, TeamDefault, TeamDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Team\"]) @router.post(\"/team-create\", status_code=status.HTTP_201_CREATED) def team_create(team: TeamDefault, session=Depends(get_session)) -> Team: team = Team.model_validate(team) session.add(team) session.commit() session.refresh(team) return team @router.get(\"/list-teams\", status_code=status.HTTP_200_OK) def teams_list(session=Depends(get_session)) -> list[Team]: return session.query(Team).all() @router.get(\"/team/{team_id}\", status_code=status.HTTP_200_OK, response_model=TeamDisplay) def team_get(team_id: int, session=Depends(get_session)) -> Team: obj = session.get(Team, team_id) if obj is None: raise HTTPException(status_code=404, detail=\"team not found\") return obj @router.patch(\"/team/update/{team_id}\", status_code=status.HTTP_202_ACCEPTED) def team_update(team_id: int, team: TeamDefault, session=Depends(get_session)) \\ -> Team: db_team = session.get(Team, team_id) if not db_team: raise HTTPException(status_code=404, detail=\"team not found\") team_data = team.model_dump(exclude_unset=True) for key, value in team_data.items(): setattr(db_team, key, value) session.add(db_team) session.commit() session.refresh(db_team) return db_team @router.delete(\"/team/delete/{team_id}\", status_code=status.HTTP_204_NO_CONTENT) def team_delete(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"team not found\") session.delete(team) session.commit() return {\"ok\": True}","title":"\u041f\u0420 1.2"},{"location":"%D0%9F%D0%A01.2/#12","text":"","title":"\u041f\u0420 1.2"},{"location":"%D0%9F%D0%A01.2/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"%D0%9F%D0%A01.2/#mainpy","text":"from fastapi import FastAPI import uvicorn from database import init_db from routers.task_router import router as tasks_router from routers.participant_router import router as participant_router from routers.submission_router import router as submission_router from routers.team_member_router import router as team_member_router from routers.team_router import router as team_router app = FastAPI() app.include_router(participant_router, prefix=\"/participants\") app.include_router(team_member_router, prefix=\"/team_members\") app.include_router(team_router, prefix=\"/teams\") app.include_router(tasks_router, prefix=\"/tasks\") app.include_router(submission_router, prefix=\"/submissions\") @app.on_event(\"startup\") def on_startup(): init_db()","title":"main.py"},{"location":"%D0%9F%D0%A01.2/#databasepy","text":"from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"database.py"},{"location":"%D0%9F%D0%A01.2/#schemaspy","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Urgency(Enum): emergency = 'emergency' urgently = 'urgently' no_hurry = 'no_hurry' one_day = 'one_day' class TeamMemberDefault(SQLModel): participant_id: Optional[int] = Field(default=None, foreign_key=\"participant.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") class TeamMember(TeamMemberDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[\"Participant\"] = Relationship(back_populates=\"teammembers\") teams: Optional[\"Team\"] = Relationship(back_populates=\"teammembers\") class SubmissionDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") work_link: str urgency: Urgency class Submission(SubmissionDefault, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[\"Task\"] = Relationship(back_populates=\"submissions\") teams: Optional[\"Team\"] = Relationship(back_populates=\"submissions\") class ParticipantDefault(SQLModel): username: str email: str password: str contact_number: str class Participant(ParticipantDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"participants\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"participants\") class TeamDefault(SQLModel): name: str description: str class Team(TeamDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[List[\"Participant\"]] = Relationship( back_populates=\"teams\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"teams\") tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"teams\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"teams\") class TaskDefault(SQLModel): title: str description: str requirements: str evaluation_criteria: str class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"tasks\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"tasks\") class ParticipantDisplay(ParticipantDefault): teams: Optional[List[\"Team\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None class TeamDisplay(TeamDefault): participants: Optional[List[\"Participant\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None tasks: Optional[List[\"Task\"]] = None submissions: Optional[List[\"Submission\"]] = None class TaskDisplay(TaskDefault): teams: Optional[List[\"Team\"]] = None submissions: Optional[List[\"Submission\"]] = None class Login(SQLModel): username: str password: str class ChangePassword(SQLModel): old_password: str new_password: str","title":"schemas.py"},{"location":"%D0%9F%D0%A01.2/#_2","text":"","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"%D0%9F%D0%A01.2/#participant_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Participant, ParticipantDefault, ParticipantDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Participant\"]) @router.post(\"/participant-create\", status_code=status.HTTP_201_CREATED) def participant_create(participant: ParticipantDefault, session=Depends(get_session)) -> Participant: participant = Participant.model_validate(participant) session.add(participant) session.commit() session.refresh(participant) return participant @router.get(\"/list-participants\", status_code=status.HTTP_200_OK) def participants_list(session=Depends(get_session)) -> list[Participant]: return session.query(Participant).all() @router.get(\"/participant/{participant_id}\", status_code=status.HTTP_200_OK, response_model=ParticipantDisplay) def participant_get(participant_id: int, session=Depends(get_session)): obj = session.get(Participant, participant_id) if obj is None: raise HTTPException(status_code=404, detail=\"participant not found\") return obj @router.patch(\"/participant/update/{participant_id}\", status_code=status.HTTP_202_ACCEPTED) def participant_update(participant_id: int, participant: ParticipantDefault, session=Depends(get_session)) \\ -> Participant: db_participant = session.get(Participant, participant_id) if not db_participant: raise HTTPException(status_code=404, detail=\"participant not found\") participant_data = participant.model_dump(exclude_unset=True) for key, value in participant_data.items(): setattr(db_participant, key, value) session.add(db_participant) session.commit() session.refresh(db_participant) return db_participant @router.delete(\"/participant/delete/{participant_id}\", status_code=status.HTTP_204_NO_CONTENT) def participant_delete(participant_id: int, session=Depends(get_session)): participant = session.get(Participant, participant_id) if not participant: raise HTTPException(status_code=404, detail=\"participant not found\") session.delete(participant) session.commit() return {\"ok\": True}","title":"participant_router.py"},{"location":"%D0%9F%D0%A01.2/#submission_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Submission, SubmissionDefault from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Submissions\"]) @router.post(\"/submission-create\", status_code=status.HTTP_201_CREATED) def submission_create(submission: SubmissionDefault, session=Depends(get_session)) -> Submission: submission = Submission.model_validate(submission) session.add(submission) session.commit() session.refresh(submission) return submission @router.get(\"/list-submissions\", status_code=status.HTTP_200_OK) def submissions_list(session=Depends(get_session)) -> list[Submission]: return session.query(Submission).all() @router.get(\"/submission/{submission_id}\", status_code=status.HTTP_200_OK) def submission_get(submission_id: int, session=Depends(get_session)) -> Submission: obj = session.get(Submission, submission_id) if obj is None: raise HTTPException(status_code=404, detail=\"submission not found\") return obj @router.patch(\"/submission/update/{submission_id}\", status_code=status.HTTP_202_ACCEPTED) def submission_update(submission_id: int, submission: SubmissionDefault, session=Depends(get_session)) \\ -> Submission: db_submission = session.get(Submission, submission_id) if not db_submission: raise HTTPException(status_code=404, detail=\"submission not found\") submission_data = submission.model_dump(exclude_unset=True) for key, value in submission_data.items(): setattr(db_submission, key, value) session.add(db_submission) session.commit() session.refresh(db_submission) return db_submission @router.delete(\"/submission/delete/{submission_id}\", status_code=status.HTTP_204_NO_CONTENT) def submission_delete(submission_id: int, session=Depends(get_session)): submission = session.get(Submission, submission_id) if not submission: raise HTTPException(status_code=404, detail=\"submission not found\") session.delete(submission) session.commit() return {\"ok\": True}","title":"submission_router.py"},{"location":"%D0%9F%D0%A01.2/#task-routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Task, TaskDefault, TaskDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Task\"]) @router.post(\"/task-create\", status_code=status.HTTP_201_CREATED) def task_create(task: TaskDefault, session=Depends(get_session)) -> Task: task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return task @router.get(\"/list-tasks\", status_code=status.HTTP_200_OK) def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @router.get(\"/task/{task_id}\", status_code=status.HTTP_200_OK, response_model=TaskDisplay) def task_get(task_id: int, session=Depends(get_session)) -> Task: obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @router.patch(\"/task/update/{task_id}\", status_code=status.HTTP_202_ACCEPTED) def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) \\ -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @router.delete(\"/task/delete/{task_id}\", status_code=status.HTTP_204_NO_CONTENT) def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True}","title":"task-router.py"},{"location":"%D0%9F%D0%A01.2/#team_member_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Task, TaskDefault, TaskDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Task\"]) @router.post(\"/task-create\", status_code=status.HTTP_201_CREATED) def task_create(task: TaskDefault, session=Depends(get_session)) -> Task: task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return task @router.get(\"/list-tasks\", status_code=status.HTTP_200_OK) def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @router.get(\"/task/{task_id}\", status_code=status.HTTP_200_OK, response_model=TaskDisplay) def task_get(task_id: int, session=Depends(get_session)) -> Task: obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @router.patch(\"/task/update/{task_id}\", status_code=status.HTTP_202_ACCEPTED) def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) \\ -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @router.delete(\"/task/delete/{task_id}\", status_code=status.HTTP_204_NO_CONTENT) def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True}","title":"team_member_router.py"},{"location":"%D0%9F%D0%A01.2/#team_routerpy","text":"from fastapi import APIRouter, HTTPException from fastapi import Depends, status from schemas import Team, TeamDefault, TeamDisplay from database import get_session from typing_extensions import TypedDict router = APIRouter(tags=[\"Team\"]) @router.post(\"/team-create\", status_code=status.HTTP_201_CREATED) def team_create(team: TeamDefault, session=Depends(get_session)) -> Team: team = Team.model_validate(team) session.add(team) session.commit() session.refresh(team) return team @router.get(\"/list-teams\", status_code=status.HTTP_200_OK) def teams_list(session=Depends(get_session)) -> list[Team]: return session.query(Team).all() @router.get(\"/team/{team_id}\", status_code=status.HTTP_200_OK, response_model=TeamDisplay) def team_get(team_id: int, session=Depends(get_session)) -> Team: obj = session.get(Team, team_id) if obj is None: raise HTTPException(status_code=404, detail=\"team not found\") return obj @router.patch(\"/team/update/{team_id}\", status_code=status.HTTP_202_ACCEPTED) def team_update(team_id: int, team: TeamDefault, session=Depends(get_session)) \\ -> Team: db_team = session.get(Team, team_id) if not db_team: raise HTTPException(status_code=404, detail=\"team not found\") team_data = team.model_dump(exclude_unset=True) for key, value in team_data.items(): setattr(db_team, key, value) session.add(db_team) session.commit() session.refresh(db_team) return db_team @router.delete(\"/team/delete/{team_id}\", status_code=status.HTTP_204_NO_CONTENT) def team_delete(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"team not found\") session.delete(team) session.commit() return {\"ok\": True}","title":"team_router.py"},{"location":"%D0%9F%D0%A01.3/","text":"\u041f\u0420 1.3 \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f main.py from fastapi import FastAPI import uvicorn from database import init_db from routers.task_router import router as tasks_router from routers.participant_router import router as participant_router from routers.submission_router import router as submission_router from routers.team_member_router import router as team_member_router from routers.team_router import router as team_router app = FastAPI() app.include_router(participant_router, prefix=\"/participants\") app.include_router(team_member_router, prefix=\"/team_members\") app.include_router(team_router, prefix=\"/teams\") app.include_router(tasks_router, prefix=\"/tasks\") app.include_router(submission_router, prefix=\"/submissions\") @app.on_event(\"startup\") def on_startup(): init_db() database.py from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session schemas.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Urgency(Enum): emergency = 'emergency' urgently = 'urgently' no_hurry = 'no_hurry' one_day = 'one_day' class TeamMemberDefault(SQLModel): participant_id: Optional[int] = Field(default=None, foreign_key=\"participant.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") class TeamMember(TeamMemberDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[\"Participant\"] = Relationship(back_populates=\"teammembers\") teams: Optional[\"Team\"] = Relationship(back_populates=\"teammembers\") class SubmissionDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") work_link: str urgency: Urgency class Submission(SubmissionDefault, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[\"Task\"] = Relationship(back_populates=\"submissions\") teams: Optional[\"Team\"] = Relationship(back_populates=\"submissions\") class ParticipantDefault(SQLModel): username: str email: str password: str contact_number: str class Participant(ParticipantDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"participants\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"participants\") class TeamDefault(SQLModel): name: str description: str class Team(TeamDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[List[\"Participant\"]] = Relationship( back_populates=\"teams\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"teams\") tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"teams\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"teams\") class TaskDefault(SQLModel): title: str description: str requirements: str evaluation_criteria: str class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"tasks\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"tasks\") class ParticipantDisplay(ParticipantDefault): teams: Optional[List[\"Team\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None class TeamDisplay(TeamDefault): participants: Optional[List[\"Participant\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None tasks: Optional[List[\"Task\"]] = None submissions: Optional[List[\"Submission\"]] = None class TaskDisplay(TaskDefault): teams: Optional[List[\"Team\"]] = None submissions: Optional[List[\"Submission\"]] = None class Login(SQLModel): username: str password: str class ChangePassword(SQLModel): old_password: str new_password: str alembic.ini # A generic, single database configuration. [alembic] # path to migration scripts script_location = migrations # template used to generate migration file names; The default value is %%(rev)s_%%(slug)s # Uncomment the line below if you want the files to be prepended with date and time # see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file # for all available tokens # file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s # sys.path path, will be prepended to sys.path if present. # defaults to the current working directory. prepend_sys_path = . # timezone to use when rendering the date within the migration file # as well as the filename. # If specified, requires the python>=3.9 or backports.zoneinfo library. # Any required deps can installed by adding `alembic[tz]` to the pip requirements # string value is passed to ZoneInfo() # leave blank for localtime # timezone = # max length of characters to apply to the # \"slug\" field # truncate_slug_length = 40 # set to 'true' to run the environment during # the 'revision' command, regardless of autogenerate # revision_environment = false # set to 'true' to allow .pyc and .pyo files without # a source .py file to be detected as revisions in the # versions/ directory # sourceless = false # version location specification; This defaults # to migrations/versions. When using multiple version # directories, initial revisions must be specified with --version-path. # The path separator used here should be the separator specified by \"version_path_separator\" below. # version_locations = %(here)s/bar:%(here)s/bat:migrations/versions # version path separator; As mentioned above, this is the character used to split # version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep. # If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas. # Valid values for version_path_separator are: # # version_path_separator = : # version_path_separator = ; # version_path_separator = space version_path_separator = os # Use os.pathsep. Default configuration used for new projects. # set to 'true' to search source files recursively # in each \"version_locations\" directory # new in Alembic version 1.10 # recursive_version_locations = false # the output encoding used when revision files # are written from script.py.mako # output_encoding = utf-8 sqlalchemy.url = driver://user:pass@localhost/dbname [post_write_hooks] # post_write_hooks defines scripts or Python functions that are run # on newly generated revision scripts. See the documentation for further # detail and examples # format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint # hooks = black # black.type = console_scripts # black.entrypoint = black # black.options = -l 79 REVISION_SCRIPT_FILENAME # lint with attempts to fix using \"ruff\" - use the exec runner, execute a binary # hooks = ruff # ruff.type = exec # ruff.executable = %(here)s/.venv/bin/ruff # ruff.options = --fix REVISION_SCRIPT_FILENAME # Logging configuration [loggers] keys = root,sqlalchemy,alembic [handlers] keys = console [formatters] keys = generic [logger_root] level = WARN handlers = console qualname = [logger_sqlalchemy] level = WARN handlers = qualname = sqlalchemy.engine [logger_alembic] level = INFO handlers = qualname = alembic [handler_console] class = StreamHandler args = (sys.stderr,) level = NOTSET formatter = generic [formatter_generic] format = %(levelname)-5.5s [%(name)s] %(message)s datefmt = %H:%M:%S env.py from logging.config import fileConfig from sqlalchemy import engine_from_config from sqlalchemy import pool from alembic import context from models import * import os from dotenv import load_dotenv load_dotenv() # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context.config # Interpret the config file for Python logging. # This line sets up loggers basically. fileConfig(config.config_file_name) config.set_main_option('sqlalchemy.url', os.getenv('DB_ADMIN')) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata #target_metadata = None target_metadata = SQLModel.metadata # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline() -> None: \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config.get_main_option(\"sqlalchemy.url\") context.configure( url=url, target_metadata=target_metadata, literal_binds=True, dialect_opts={\"paramstyle\": \"named\"}, ) with context.begin_transaction(): context.run_migrations() def run_migrations_online() -> None: \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = engine_from_config( config.get_section(config.config_ini_section, {}), prefix=\"sqlalchemy.\", poolclass=pool.NullPool, ) with connectable.connect() as connection: context.configure( connection=connection, target_metadata=target_metadata ) with context.begin_transaction(): context.run_migrations() if context.is_offline_mode(): run_migrations_offline() else: run_migrations_online()","title":"\u041f\u0420 1.3"},{"location":"%D0%9F%D0%A01.3/#13","text":"","title":"\u041f\u0420 1.3"},{"location":"%D0%9F%D0%A01.3/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"%D0%9F%D0%A01.3/#mainpy","text":"from fastapi import FastAPI import uvicorn from database import init_db from routers.task_router import router as tasks_router from routers.participant_router import router as participant_router from routers.submission_router import router as submission_router from routers.team_member_router import router as team_member_router from routers.team_router import router as team_router app = FastAPI() app.include_router(participant_router, prefix=\"/participants\") app.include_router(team_member_router, prefix=\"/team_members\") app.include_router(team_router, prefix=\"/teams\") app.include_router(tasks_router, prefix=\"/tasks\") app.include_router(submission_router, prefix=\"/submissions\") @app.on_event(\"startup\") def on_startup(): init_db()","title":"main.py"},{"location":"%D0%9F%D0%A01.3/#databasepy","text":"from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"database.py"},{"location":"%D0%9F%D0%A01.3/#schemaspy","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Urgency(Enum): emergency = 'emergency' urgently = 'urgently' no_hurry = 'no_hurry' one_day = 'one_day' class TeamMemberDefault(SQLModel): participant_id: Optional[int] = Field(default=None, foreign_key=\"participant.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") class TeamMember(TeamMemberDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[\"Participant\"] = Relationship(back_populates=\"teammembers\") teams: Optional[\"Team\"] = Relationship(back_populates=\"teammembers\") class SubmissionDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") work_link: str urgency: Urgency class Submission(SubmissionDefault, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[\"Task\"] = Relationship(back_populates=\"submissions\") teams: Optional[\"Team\"] = Relationship(back_populates=\"submissions\") class ParticipantDefault(SQLModel): username: str email: str password: str contact_number: str class Participant(ParticipantDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"participants\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"participants\") class TeamDefault(SQLModel): name: str description: str class Team(TeamDefault, table=True): id: int = Field(default=None, primary_key=True) participants: Optional[List[\"Participant\"]] = Relationship( back_populates=\"teams\", link_model=TeamMember ) teammembers: Optional[List[\"TeamMember\"]] = Relationship(back_populates=\"teams\") tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"teams\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"teams\") class TaskDefault(SQLModel): title: str description: str requirements: str evaluation_criteria: str class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) teams: Optional[List[\"Team\"]] = Relationship( back_populates=\"tasks\", link_model=Submission ) submissions: Optional[List[\"Submission\"]] = Relationship(back_populates=\"tasks\") class ParticipantDisplay(ParticipantDefault): teams: Optional[List[\"Team\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None class TeamDisplay(TeamDefault): participants: Optional[List[\"Participant\"]] = None teammembers: Optional[List[\"TeamMember\"]] = None tasks: Optional[List[\"Task\"]] = None submissions: Optional[List[\"Submission\"]] = None class TaskDisplay(TaskDefault): teams: Optional[List[\"Team\"]] = None submissions: Optional[List[\"Submission\"]] = None class Login(SQLModel): username: str password: str class ChangePassword(SQLModel): old_password: str new_password: str","title":"schemas.py"},{"location":"%D0%9F%D0%A01.3/#alembicini","text":"# A generic, single database configuration. [alembic] # path to migration scripts script_location = migrations # template used to generate migration file names; The default value is %%(rev)s_%%(slug)s # Uncomment the line below if you want the files to be prepended with date and time # see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file # for all available tokens # file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s # sys.path path, will be prepended to sys.path if present. # defaults to the current working directory. prepend_sys_path = . # timezone to use when rendering the date within the migration file # as well as the filename. # If specified, requires the python>=3.9 or backports.zoneinfo library. # Any required deps can installed by adding `alembic[tz]` to the pip requirements # string value is passed to ZoneInfo() # leave blank for localtime # timezone = # max length of characters to apply to the # \"slug\" field # truncate_slug_length = 40 # set to 'true' to run the environment during # the 'revision' command, regardless of autogenerate # revision_environment = false # set to 'true' to allow .pyc and .pyo files without # a source .py file to be detected as revisions in the # versions/ directory # sourceless = false # version location specification; This defaults # to migrations/versions. When using multiple version # directories, initial revisions must be specified with --version-path. # The path separator used here should be the separator specified by \"version_path_separator\" below. # version_locations = %(here)s/bar:%(here)s/bat:migrations/versions # version path separator; As mentioned above, this is the character used to split # version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep. # If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas. # Valid values for version_path_separator are: # # version_path_separator = : # version_path_separator = ; # version_path_separator = space version_path_separator = os # Use os.pathsep. Default configuration used for new projects. # set to 'true' to search source files recursively # in each \"version_locations\" directory # new in Alembic version 1.10 # recursive_version_locations = false # the output encoding used when revision files # are written from script.py.mako # output_encoding = utf-8 sqlalchemy.url = driver://user:pass@localhost/dbname [post_write_hooks] # post_write_hooks defines scripts or Python functions that are run # on newly generated revision scripts. See the documentation for further # detail and examples # format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint # hooks = black # black.type = console_scripts # black.entrypoint = black # black.options = -l 79 REVISION_SCRIPT_FILENAME # lint with attempts to fix using \"ruff\" - use the exec runner, execute a binary # hooks = ruff # ruff.type = exec # ruff.executable = %(here)s/.venv/bin/ruff # ruff.options = --fix REVISION_SCRIPT_FILENAME # Logging configuration [loggers] keys = root,sqlalchemy,alembic [handlers] keys = console [formatters] keys = generic [logger_root] level = WARN handlers = console qualname = [logger_sqlalchemy] level = WARN handlers = qualname = sqlalchemy.engine [logger_alembic] level = INFO handlers = qualname = alembic [handler_console] class = StreamHandler args = (sys.stderr,) level = NOTSET formatter = generic [formatter_generic] format = %(levelname)-5.5s [%(name)s] %(message)s datefmt = %H:%M:%S","title":"alembic.ini"},{"location":"%D0%9F%D0%A01.3/#envpy","text":"from logging.config import fileConfig from sqlalchemy import engine_from_config from sqlalchemy import pool from alembic import context from models import * import os from dotenv import load_dotenv load_dotenv() # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context.config # Interpret the config file for Python logging. # This line sets up loggers basically. fileConfig(config.config_file_name) config.set_main_option('sqlalchemy.url', os.getenv('DB_ADMIN')) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata #target_metadata = None target_metadata = SQLModel.metadata # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline() -> None: \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config.get_main_option(\"sqlalchemy.url\") context.configure( url=url, target_metadata=target_metadata, literal_binds=True, dialect_opts={\"paramstyle\": \"named\"}, ) with context.begin_transaction(): context.run_migrations() def run_migrations_online() -> None: \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = engine_from_config( config.get_section(config.config_ini_section, {}), prefix=\"sqlalchemy.\", poolclass=pool.NullPool, ) with connectable.connect() as connection: context.configure( connection=connection, target_metadata=target_metadata ) with context.begin_transaction(): context.run_migrations() if context.is_offline_mode(): run_migrations_offline() else: run_migrations_online()","title":"env.py"}]}